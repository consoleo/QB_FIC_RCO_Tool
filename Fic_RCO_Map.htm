<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <title>YQB FIC RCO Map</title>

  <!--

                  RCO Radio Map v2.2 BETA

      Coded by:       Darren Johnston (johdarr@navcanada.ca)
						Modified by Michael Simard for YQB FIC (simarmi@navcanada.ca)      					
      Last modified:  11 March 2013
      					
      
      Uses:           Google Maps Api v3.x
                      Google Javascipt API's
                      jQuery 1.7.1
                      jQueryUI 1.8.16
                      jQueryUI themeroller/themeswitchertool
                      arcGIS server backend
                      Unofficial Google Maps v3 arcGIS linking tool (arcgislink)
                      W. Randolf Franklin's PNPOLY algorithm

		
      This application assists Flight Service Specialists determine the
      geographic location and extent of various aviation and meteorological
      products.

06 Sept 2013 : revised RCO entries and removed PL and modified AH	

11 Mars 2013 : Added LQ RCO and commented line 1751 (theme roller) that stalled page

22 Nov 2013 : 	Did some separations of scripts to better isolate global variables
				Rewrote Sigmet decoding algorithm in autoload functions to support new format. 
				
29 Nov 2013 : 	Fixed Autoload date verification routine Testing GIT !!!
  -->

  <!-- Load Google Maps and JavaScript API's and Google-hosted JQuery -->
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?libraries=geometry&amp;sensor=false"></script>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js"></script>
  <script type="text/javascript" src="http://www.google.com/jsapi"></script>
  <script type="text/javascript" src="http://jqueryui.com/themeroller/themeswitchertool/"></script>

  <!-- Load arcGIS server API's. NOTE: For heavy production use, an arcGIS service should be set up on the corporate network -->
  <script src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/arcgislink/src/arcgislink.js" type="text/javascript" ></script>

  <link rel="stylesheet" type="text/css" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/themes/dark-hive/jquery-ui.css" />
  <style type="text/css">
    .left_panel {
      width:74%;
    }

    .right_panel {
      width:26%;
    }

    html {
      height:100%;
      width:100%;
    }

    body {
      height:100%;
      width:100%;
      margin:0;
      font-family: Verdana,Arial,sans-serif;
      font-size:0.5em;
      background-color:black;
      z-index:1;
    }

    h1, h2 {
      margin:0;
      padding:0;
      border:0;
    }

    span {
      float:left;
    }

    input {
      display:inline;
    }

    textarea {
      min-width:100%;
      resize:vertical;
    }

    a {
      cursor:pointer !important;
    }

    #loading {
      position:absolute;
      top:0;
      left:0;
      height:100%;
      width:100%;
      background-color:white;
      background-image:url('https://public.bay.livefilestore.com/y1pWv7gbF0JNnNaiBFUA7GLClncLEYwMpKtqXKRGV7-udFohE72Hbpwm2ClSUOrFuv4NqUgvcLhfSaRNHOZn5gXxw/spinner.gif?psid=1');
      background-repeat:no-repeat;
      background-position:center;
      z-index:10001;
    }

    #title {
      position:absolute;
      top:5px;
      text-align:right;
      margin-right:10px;
      text-shadow:grey 0 0 2px;
      z-index:5;
    }

    #left_panel {
      height:100%;
      float:left;
    }

    #right_panel {
      float:left;
      margin-top:-2px !important;
      border:0 !important;
    }

    #modal_help {
      font-size: 1.3em !important;
    }
    
    #modal_sigmet {
      font-size: 1.3em !important;
    }

    button,
    .button {
      margin:4px;
    }

    .data_load {
      margin-left:auto;
      margin-right:auto;
      margin-top:1.5em;
    }

    .ui-icon {
      float:left;
      cursor:pointer;
    }

    .rco_boxes {
      padding-left:2em;
    }

    .hidden {
      display:none;
    }

    .center {
      text-align:center;
    }

    .top_margin {
      margin-top:1em;
    }

    .bottom_margin {
      margin-bottom:1em;
    }

    .right_margin {
      margin-right:0.5em;
    }

    .left_floated {
      float:left;
      margin-right:1em;
    }

    .right_floated {
      float:right;
    }

    .clear {
      clear:both;
    }
  </style>

<!--  Global variables used -->
  <script type="text/javascript">
    // Mission setup.
    var MAP_CENTER = new google.maps.LatLng(55, -73);
    
    var SUD = ['BF', 'VB', 'GP','ND','SL','GR','YY','D4','SC','UL','NA','OW','QB','IF','ZV','LQ'];
    var NORD = ['MT','BR','PH','KG','AS','VP','GW','GL','AH','NM','HH','PX','RJ','UY','VO','ZG','KL','WK'];
    
    // RCO data.
    var BF = ['123.475',   '4737N', '6544W'];
    var VB = ['123.55',   '4808N', '6607W'];
    var BR = ['126.7',   '5423N', '7035W'];
    var MT = ['123.375',   '4947N', '7432W'];
    var GP = ['123.475',   '4847N', '6429W'];
    var ND = ['123.375',   '4531N', '7534W'];
    var SL = ['126.7',   '4705N', '6746W'];
    var GR = ['123.55',   '4722N', '6154W'];
    var PH = ['123.55',   '5827N', '7807W'];
    var KG = ['123.475',   '6135N', '7156W'];
    var AS = ['126.7',   '6001N', '7000W'];
    var VP = ['123.275',   '5806N', '6826W'];
    var GW = ['123.475',   '5517N', '7746W'];
    var GL = ['123.375',   '5338N', '7742W'];
    var AH = ['123.55',   '5352N', '7325W'];
    var LQ = ['122.475',   '4725N', '7246W'];
    var NM = ['123.55',   '4946N', '7748W'];
    var YY = ['123.375',   '4837N', '6812W'];
    var D4 = ['123.475',   '4632N', '7549W'];
    var SC = ['123.25',   '4527N', '7107W'];
    var UL = ['123.55',   '4529N', '7346W'];
    var NA = ['123.85',   '5011N', '6149W'];
    var HH = ['123.275',   '5144N', '7606W'];
    var OW = ['123.15',   '4519N', '7540W'];
    var PX = ['123.275',   '6003N', '7717W'];
    var QB = ['123.275',   '4647N', '7123W'];
    var RJ = ['123.55',   '4831N', '7216W'];
    var UY = ['123.475',   '4812N', '7850W'];
    var IF = ['119.575',   '5113N', '5840W'];
    var ZG = ['126.7',   '6211N', '7540W'];
    var KL = ['126.7',   '5449N', '6646W'];
    var ZV = ['123.275',   '5013N', '6616W'];
    var VO = ['122.375',   '4803N', '7747W'];
    var WK = ['123.375',   '5255N', '6652W'];


    // Constants
    var GOOGLE_GEOCODE_BASE_URL = "http://maps.googleapis.com/maps/api/geocode/json?address=ZZZZ&sensor=false"
    var MARKER_BASE_URL = "http://chart.apis.google.com/chart?chst=d_map_spin&chld=0.7|0|FFFFFF|12|b|";
    var MARKER_COLOUR = '26B3F7';
    var SIGMET_COLOUR = 'CC0000';
    var SIGMET_FILL = 'CC0000';
    var PIREP_COLOUR = 'FFFF00';
    var URGENT_PIREP_COLOUR = 'FF6600';
    var NOTAM_COLOUR = 'CC0000';
    var NOTAM_FILL = '000000';
    // Global map variable.
    var myMap;
    // currZIndex is used then incremented each time an item is brought to the
    // front on the map.
    var currZIndex = 1;
    // Variable to all the markers. This data is also stored in the marker
    // constant. Duplication is required to lighten processing load at the
    // expense of slight increase in memory usage.
    var markerVars = [];
</script>

<script type="text/javascript">
    // Extends Numbers type to convert numeric degrees to radians.
    if (typeof(Number.prototype.toRad) === 'undefined') {
      Number.prototype.toRad = function() {
        return this * Math.PI / 180;
      }
    }

    // Extends Numbers type to convert radians to signed degrees.
    if (typeof(Number.prototype.toDeg) === 'undefined') {
      Number.prototype.toDeg = function() {
        return this * 180 / Math.PI;
      }
    }

    /*
     * Constructor for coordData object.
     *
     * @param coordType [String] One of 'coord' or 'icao'.
     * @param data1 [Number] Latitude represented as DMS if coordType is
     *        'coord' or bearing if coordType is 'icao'.
     * @param data2 [Number] Longitude represented as DMS if coordType is
     *        'coord' or range identifier if coordType is 'icao'.
     * @param icaoCode [String] ICAO code if coordType is 'icao', otherwise
     *        it is ignored.
     */
    function coordData(coordType, data1, data2, icaoCode) {
      this.format = coordType;
      // lat and lng are assigned if coord data is passed, otherwise null.
      this.lat = (coordType == 'coord') ? data1 : null;
      this.lng = (coordType == 'coord') ? data2 : null;
      // bearing, range and icao are assigned if ICAO data is passed,
      // otherwise null.
      this.bearing = (coordType == 'icao') ? data1 : null;
      this.range = (coordType == 'icao') ? data2 : null;
      this.icao = (coordType == 'icao') ? icaoCode : null;
    }

    /*
     * Compares coordData objects. Returns true of 'this' contains the
     * same data as the parameter.
     *
     * @param x [coordData] Other object to compare to.
     * @returns [boolean] True if the objects contain the same data, false
     *        otherwise.
     */
    coordData.prototype.equals = function(x) {
      // If they aren't the same type, return false.
      if(typeof x != typeof this) {
        return false;
      }
      // If any members aren't equal, return false.
      if(this.format != x.format || this.lat != x.lat || this.lng != x.lng ||
            this.bearing != x.bearing || this.range != x.range ||
            this.icao != x.icao) {
        return false;
      }
      // If false hasn't been returned yet, the objects contain the same data.
      return true;
    }

    /*
     * Parses a string containing a coordinate value id DMS format. Note: S
     * values are negated as expected, but E values are negated contrary to
     * standard geodetic practice. This is because all calling functions shall
     * assume Westings are entered and negate longitudes already. Coordinate
     * must contain degrees, but minutes and seconds are optional.
     *
     * @param coordToParse [String] The coordinate to parse.
     * @returns number [Coordinate] in decimal format.
     * @throws [String] If data is invalid.
     */
    function parseCoord(coordToParse) {
      var degrees;
      // Initialize minutes and seconds to 0 as they are optional.
      var minutes = 0;
      var seconds = 0;
      // Assume coord will be negated by calling function when necessary.
      var negate = false;
      // Check for minus sign at the start. Set negate and remove if present.
      if(coordToParse[0] == '-') {
        negate = true;
        coordToParse = coordToParse.slice(1);
      }
      // If the remaining input isn't an integer, the format is not valid.
      // NB: Ignore any leading 0's so parseInt will match.
      var tempCoord = coordToParse;
      while (tempCoord.charAt(0) == '0') {
        tempCoord = tempCoord.substr(1);
      }
      if(tempCoord != parseInt(tempCoord)) {
        throw('Invalid format.');
      }
      // If there are an even number of characters, add a leading 0 for easier
      // parsing.
      if(coordToParse.length % 2 == 0) {
        coordToParse = '0' + coordToParse;
      }
      // If there are 1 or 3 characters (0 and 2 not possible), assume only
      // degrees.
      if(coordToParse.length < 4) {
        degrees = parseInt(coordToParse);
      }
      // Otherwise the string is 5 or 7 characters long and has at least
      // degrees and minutes.
      else {
        degrees = parseInt(coordToParse.substr(0, 3), 10);
        minutes = parseInt(coordToParse.substr(3, 2), 10);
        // If the string is 7 characters long, parse the seconds.
        seconds = parseInt(coordToParse.substr(-2), 10);
      }
      // To convert to decimal, first convert minutes to seconds and add them
      // together.
      seconds = seconds + (minutes * 60);
      // Then divide the total number of seconds by 3600 to get the decimal
      // portion.
      seconds = seconds / 3600;
      // Finally, add decimal seconds to whole degrees.
      var dmsCoords = degrees + seconds;
      // Negated if required.
      if(negate) {
        dmsCoords = 0 - dmsCoords;
      }
      // Return the final value.
      return dmsCoords;
    }

    /*
     * Extracts the value stored in the parameter input box and calculates the
     * distance in meters. NB: 1NM = 1852m.
     *
     * @param radiusBox [jQuery object] Where extract the value from.
     * @return [Number] Distance in meters.
     * @throws [NumberFormatException] If unparsable data is extracted.
     */
    function getRadius(radiusBox) {
      var value = $(radiusBox).val();
      if(value == '') {
        return 0;
      }
      try {
        var radius = parseInt(value, 10) * 1852;
        return radius;
      }
      catch(e){
        throw e;
      }
    }

    /*
     * Creates the markers and draws RCO rings.
     *
     * @throws [NumberFormatException] If invalid coordinate data exists.
     */
    function prepareMap() {
      // Generate a list of all RCO's to start.
      var rcoList = [];
      rcoList = NORD.concat(SUD);

      for(var i = 0; i < rcoList.length; ++i) {
        var rcoVar = window[rcoList[i]];
        // Generate marker URL.
        var iconURL = MARKER_BASE_URL.replace('FFFFFF', MARKER_COLOUR) +
              rcoList[i];
        // Try to parse the coordinates and catch any exceptions, also strip
        // trailing cardinal points off coordinates which are only included in
        // global constant for readability of non-programmers.
        try {
          var lat = parseCoord(rcoVar[1].slice(0, -1));
          // Longitude will be a westing, so negate.
          var lng = 0 - parseCoord(rcoVar[2].slice(0, -1));
          var markerCoords = new google.maps.LatLng(lat, lng);
        }
        catch(e) {
          throw(e);
        }
        // Plot the marker.
        var marker = new google.maps.Marker({
          map: myMap,
          position: markerCoords,
          title: rcoList[i] + " RCO - " + rcoVar[0],
          icon: iconURL,
          zIndex: 1
        });

        // Add the marker to the global variables.
        rcoVar.push(marker);
        markerVars.push(marker);

        // Draw the ring.
        var rcoCircle = new google.maps.Circle({
          map: myMap,
          center: markerCoords,
          radius: getRadius($('#ring_radius')),
          clickable: false,
          geodesic: true,
          fillOpacity:0.05,
          zIndex: 1
        });

        rcoVar.push(rcoCircle);
      }
    }

    /*
     * Creates the DOM checkbox for a given RCO.
     *
     * @param rco [String] The RCO's name.
     * @return [String] The DOM element text.
     * @throws [String] If the RCO data is missing.
     */
    function createCheckbox(rco) {
      if(typeof window[rco] == 'undefined') {
            throw('RCO data is missing.');
      }
      var boxClass = rco + '_RCO';
      var boxLabel = rco + ' RCO ' + window[rco][0];
      var boxElement = '<input type="checkbox" name="' + boxClass +
        '" class="rco_box" checked="checked" />';
      var boxWithLabel = '<label>' + boxElement + boxLabel + '</label><br />';
      return boxWithLabel;
    }

    /*
     * Generates checkboxes for the right-side panel to allow users to hide
     * or show specific RCO's on the map while simultaneously creating the
     * RCO markers and rings on the map.
     */
    function createCheckboxList() {
      // Set up initial frequently-used DOM selectors.
      var north2 = $('#north2');
      var south2 = $('#south2');

      // Loop through each of the sectors defined in the groups above, adding
      // a checkbox to the DOM.
      try {
        for(var i = 0; i < SUD.length; ++i) {
          var domElement = createCheckbox(SUD[i]);
          south2.append(domElement);
          }
        for(var i = 0; i < NORD.length; ++i) {
          var domElement = createCheckbox(NORD[i]);
          north2.append(domElement);
        }
      }
      catch(e) {
        alert(e);
      }
    }

    /*
     * Sets the radius option of all RCO circles to the value in #ring_radius.
     */
    function redrawRings() {
      // Get the radius
      var newRadius = getRadius($('#ring_radius'));

      // Get the list of all RCO's
      var rcoList = [];
      //rcoList = NORTH_TWO_SECTOR.concat(SOUTH_TWO_SECTOR);
      rcoList = NORD.concat(SUD);
      
      // Set the radius of each ring.
      for (var i = 0; i < rcoList.length; ++i) {
        var rcoVar = window[rcoList[i]];
        rcoVar[rcoVar.length - 1].setOptions({
          radius: newRadius
        });
      }
    }

    /*
     * verifyCheckboxes ensures that the mission checkboxes are only checked
     * when all the RCO checkboxes in its scope are checked, and unchecked
     * otherwise.
     */
    function verifyCheckboxes() {
      // Check north checkbox.
      if($('#north2:visible :checkbox')
          .not(':checked').length != 0) {
        $('#north').removeAttr('checked');
      }
      else {
        $('#north').attr('checked', 'checked');
      }
      // Check south checkbox.
      if($('#south2:visible :checkbox')
          .not(':checked').length != 0) {
        $('#south').removeAttr('checked');
      }
      else {
        $('#south').attr('checked', 'checked');
      }
    }

    /*
     * Displays the mission based on the status of various DOM elements.
     */
    function selectMission() {
      if($('#mission_select > :radio:checked').attr('id') == 'select_three_sector') 
      {
    	$('.three_sectors').removeClass('hidden');
        $('.two_sectors').addClass('hidden');
         
      }
      else {
    	  $('.three_sectors').addClass('hidden');
          $('.two_sectors').removeClass('hidden');
      }
      verifyCheckboxes();
    }

    /*
     * Hide or displays the RCO map information and ensures the RCO checkbox
     * in all missions are set to the same status.
     *
     * @param rco [jQuery object] The checkbox to consider.
     */
    function toggleBox(rcoBox) {
      // Extract RCO name.
      var rco = $(rcoBox).parent().text().substr(0, 2);
      // Make a copy of the global RCO variable.
      var rcoData = window[rco];
      // If user checked the RCO.
      if(rcoBox.is(':checked')) {
        // Check all boxes for that RCO across all missions.
        var rcoName = $(rcoBox).attr('name');
        $('[name=' + $(rcoBox).attr('name') + ']').attr('checked', 'checked');
        // Show the ring and the marker, in case it was off.
        rcoData[rcoData.length - 1].setMap(myMap);
        if(rcoData[rcoData.length - 2].getMap() == null) {
          rcoData[rcoData.length - 2].setMap(myMap);
        }
      }
      // Otherwise user unchecked the RCO.
      else {
        // Uncheck all boxes for that RCO across all missions.
        var rcoName = $(rcoBox).attr('name');
        //alert(rcoName);
        $('[name=' + $(rcoBox).attr('name') + ']').removeAttr('checked');
        rcoData[rcoData.length - 1].setMap(null);
        // If markers are set to hide, hide that as well.
        if($('#hide_markers').is(':checked')) {
          rcoData[rcoData.length - 2].setMap(null);
        }
      }
      verifyCheckboxes();
      return 0;
    }

    /*
     * Select or deselect all RCO checkboxes as appropriate.
     *
     * @param mission [jQuery object] The checkbox to consider.
     */
    function toggleMission(mission) {
      // missionCheckboxes will hold the mission's checkboxes.
      var missionCheckboxes;
      if(mission.attr('id') == 'north') {
        missionCheckboxes = $('#north2 :visible:checkbox,');
      }
      // If not north or central, must be south.
      else {
        missionCheckboxes = $('#south2 :visible:checkbox');
      }

      // If the user checked the box.
      if(mission.attr('checked') == 'checked') {
        missionCheckboxes.not(':checked').each(function() {
          $(this).attr('checked', 'checked');
          toggleBox($(this));
        });
      }
      // Otherwise the user unchecked the box.
      else {
        missionCheckboxes.filter(':checked').each(function() {
          $(this).removeAttr('checked');
          toggleBox($(this));
        });
      }
    }

    /*
     * Creates initial tab areas and establishes parameters for new tab
     * creation.
     */
    function createTabs() {
      $('.tabs').tabs({
        // tabTemplate adds close button on the top-right of any newly created
        // tabs.
        tabTemplate: '<li><a href="#{href}">#{label}</a><span ' +
              'class="ui-icon ui-icon-close">Remove Tab</span></li>',
        // Add is fired when a new tab is created.
        add: function(event, ui) {
          // Undo sortable to be readded later to ensure proper functioning.
          $(this).find('.ui-tabs-nav').sortable('destroy');

          // Reset all markers to default.
          calcBcast(null);

          // Generate new form from template.
          var section = $(this).attr('id').slice(0, -9);
          var tab_content = $('#' + section + '_template').html();
          var empty_coord = $('#coord_template').html();
          $(ui.panel).append(tab_content);
          $(ui.panel).find('fieldset').append(empty_coord);

          // Add event listeners to the newly created items.
          $(ui.panel).find('.ui-icon-shuffle').bind('click', function() {
            changeInputMethod($(this));
          });
          $(ui.panel).find('.ui-icon-minus').bind('click', function() {
            removeCoordEntry($(this));
          });
          $(ui.panel).find('.ui-icon-plus').bind('click', function() {
            addCoordEntry($(this));
          });
          $(ui.panel).find('[name=reset]').bind('click', function() {
            resetInput($(this).parent(), 'sigmet');
          });
          $(ui.panel).find('[name=hide]').bind('click', function() {
            hidePlot($(this).parent());
          });
          $(ui.panel).find('[name=show]').bind('click', function() {
            showPlot($(this).parent());
          });

          // Even listeners for SIGMET buttons.
          if(section == 'sigmet') {
            $(ui.panel).find('[name=plot_data]').bind('click', function() {
              plotSigmet($(this).parent());
            });
            $(ui.panel).find('[name=update]').bind('click', function() {
              plotSigmet($(this).parent());
            });
          }
          // Even listeners for PIREP buttons.
          else if (section == 'pirep') {
            $(ui.panel).find('[name=plot_data]').bind('click', function() {
              plotPirep($(this).parent());
            });
            $(ui.panel).find('[name=update]').bind('click', function() {
              plotPirep($(this).parent());
            });
            // Also, PIREPs are based on 1 point, so no additional boxes are
            // needed.
            $(ui.panel).find('.ui-icon-minus').remove();
            $(ui.panel).find('.ui-icon-plus').remove();
          }
          // Even listeners for NOTAM buttons.
          else {
            $(ui.panel).find('[name=plot_data]').bind('click', function() {
              plotNotam($(this).parent());
            });
            $(ui.panel).find('[name=update]').bind('click', function() {
              plotNotam($(this).parent());
            });
          }
          // Make tabs sortable again and select the new tab.
          $(this).find('.ui-tabs-nav').sortable();
          $(this).tabs('select', '#' + ui.panel.id);
        },
        // Remove is fired when a tab is closed.
        remove: function(event, ui) {
          // Remove the map plots and any backups.
          var backupTab = $('#backup-' + $(ui.panel).attr('id'));
          if(backupTab.length) {
            var plottedData = backupTab.data('map_plots');
            for(var i = 2; i < plottedData.length; ++i) {
              plottedData[i].setMap(null);
            }
            backupTab.remove();
          }
          // If another plot is displayed when this one is closed, set the
          // markers it broadcasts on to the appropriate colours.
          var tabType = $(ui.panel).attr('id').split('_')[0];
          var newTab = $('#' + tabType + '_tabs_div')
              .find('.ui-tabs-panel:not(.ui-tabs-hide)');
          if(newTab.length > 0) {
            calcBcast(newTab);
          }
          // Reset all RCO markers to default colour.
          else {
            calcBcast(null);
          }
        },
        // Show is fired when a tab is selected and under a few other
        // circumstances. This showed to be more effective than "select"
        // under the specific parameters of this application.
        show: function(event, ui) {
          // If there is plotted data, overlay it on top of all others and
          // calculate RCO's to broadcast.
          var plottedData = $(ui.panel).data('map_plots');
          if(plottedData != undefined) {
            for(var i = 2; i < plottedData.length; ++i) {
              plottedData[i].setOptions({zIndex: currZIndex++});
            }
            calcBcast(ui.panel);
          }
          // If there is no plotted data, reset all RCO's to default.
          else {
            calcBcast(null);
          }
        }
      });
    }

    /*
     * Adds a new tab to the provided element or creates a tab if there aren't
     * any.
     *
     * @param section [jQuery object] The parent div where the tabs reside
     */
    function addTab(section) {
      // Extract the section name and remove pluralization.
      var sectionName = $(section).attr('id').slice(0, -1);
      // Establish iniital tab name and id.
      var counter = 0;
      do {
        ++counter;
      }
      while($('#' + sectionName + '_new' + counter).length > 0);
      var tabUrl = sectionName + '_new' + counter;
      var tabName = 'New ' + counter;
      $('#' + sectionName + '_tabs_div').tabs('add', '#' + tabUrl, tabName);
    }
    
    function countTab(section){
    	 // Extract the section name and remove pluralization.
        var sectionName = $(section).attr('id').slice(0, -1);
        // Establish iniital tab name and id.
        var counter = 0;
    	do {
            ++counter;
          }
          while($('#' + sectionName + '_new' + counter).length > 0);
    	return counter;
    	
    }
    function parseXml(xml,status,section){
		//Fetch Sigmets from file
        $(xml).find('Sigmet').each(function(){
        
        	var cnts = countTab(section);
        	
	        //add a tab to put it into
	        addTab($(section));
	        	
	        //Hold section for last tab 
	        var curr_sect =  $(section).find($('#sigmet_new'+cnts));
	        //Populate fields
	        curr_sect.find($("input[name=sigmet_id]"))[0].value = $(this).find("Title").text();
	        curr_sect.find($("input[name=sigmet_radius]"))[0].value = $(this).find("Radius").text();
	        
	        if($(this).find("Closed").text() == "1")
	        	{var box  = curr_sect.find($("input[name=closed_area]"))[0]; $(box).attr('checked',true);}
	        
	        var cpt = 0;
	        $(this).find("Coord").each(function(){
	        	//if not first set of coords
	        	if(cpt !=0)
	        		addCoordEntry(curr_sect.find('form').find('fieldset').find('div.coordinate').last());
	        	
	        	var field_lat = curr_sect.find($("input[name=lat]"));
	        	var field_long = curr_sect.find($("input[name=lng]"));
	        	
	        	//Transpose old coordinated up on line
	        	for(var pos=1;pos < field_lat.length-1;pos++){
	        		field_lat[pos].value = field_lat[pos+1].value;
	        		field_long[pos].value = field_long[pos+1].value;
	        	}
	        		
	        	//Populate new fields
	        	field_lat[cpt].value = $(this).find("Lat").text();
	        	field_long[cpt].value = $(this).find("Long").text();
	        	cpt++;
	   			
	        })
	        
	        curr_sect.find("button[name=update]").click();
    	});
    	
    }
    
    //Parse through a XML file and add predefined items (WS,UA)
    function addPredef(section){
    	
    	$.ajax({
            type: "GET",
            url: "data.xml",
            dataType: "xml",
            success: function(xml,status){parseXml(xml,status,section);},
            error: function() {
            	alert("An error occurred while processing XML file.");
            	}
        });
    		
    }
    /*
     * Resets the input tab to default values, or to the previous values if
     * the tab had been submitted before.
     *
     * @param tab [jQuery Object] The active tab.
     * @param inputType [String] Either 'sigmet', 'pirep' or 'notam'.
     */
    function resetInput(tab, inputType) {
      var tabID = $(tab).attr('id');
      // If a backup exists, reset to that data.
      if($('#backup-' + tabID).length) {
        var parent = $(tab).parent();
        $(tab).empty();
        $('#backup-' + tabID).children().clone(true).appendTo(tab);
      }
      // Otherwise reset to defaults.
      else {
        // Empty text fields.
        $(tab).find(':text').val('');
        // Set the radius to 0.
        $(tab).find('[name=sigmet_radius]').val('0');
        // Uncheck all checkboxes.
        $(tab).find(':checkbox').removeAttr('checked');
      }
    }

    /*
     * Hides the plotted data for the supplied tab.
     *
     * @param tab [jQuery Object] The tab containing the data to hide.
     */
    function hidePlot(tab) {
      // Set the map of the data object to null to hide it.
      var mapPlots = $(tab).data('map_plots');
      // Start at 1 because 0 will be a boolean for whether to show the 150NM
      // ring or not.
      for(var i = 2; i < mapPlots.length; ++i) {
        mapPlots[i].setMap(null);
      }
      // Hide the "hide" button and display the "show" button.
      $(tab).find('[name=hide]').addClass('hidden');
      $(tab).find('[name=show]').removeClass('hidden');
    }

    /*
     * Shows the plotted data for the supplied tab.
     *
     * @param tab [jQuery Object] The tab containing the data to show.
     */
    function showPlot(tab) {
      // Set the map of the data object to myMap to show it.
      var mapPlots = $(tab).data('map_plots');
      var showLast = mapPlots[1];
      for(var i = 2; i < mapPlots.length; ++i) {
        if(i < mapPlots.length - 1 || showLast) {
          mapPlots[i].setMap(myMap);
          mapPlots[i].setOptions({fillOpacity: 0.3});
        }
      }
      // Hide the "show" button and display the "hide" button.
      $(tab).find('[name=show]').addClass('hidden');
      $(tab).find('[name=hide]').removeClass('hidden');
    }

    /*
     * Changes the input method from brn/rng and ICAO location to lat/lng.
     *
     * @param button [jQuery object] The toggle button that was clicked.
     */
    function changeInputMethod(toggle) {
      var coordMethod = $(toggle).siblings('.coord_entry');
      var icaoMethod = $(toggle).siblings('.icao_entry');
      if(coordMethod.hasClass('hidden')) {
        coordMethod.removeClass('hidden');
        icaoMethod.addClass('hidden');
      }
      else {
        coordMethod.addClass('hidden');
        icaoMethod.removeClass('hidden');
      }
    }

    /*
     * Remove coordinate input section that the clicked remove button is part
     * of.
     *
     * @param clickedButton [jQuery object] of the button that was clicked.
     */
    function removeCoordEntry(clickedButton) {
      // If there are other coordinate entries, simply remove this one.
      if(clickedButton.parent().siblings('.coordinate').length > 0) {
        clickedButton.parent().remove();
      }
      // Otherwise reset the input fields to empty.
      else {
        var inputFields = clickedButton.parent().find(':text');
        inputFields.val('');
      }
    }

    /*
     * Add inputs for another coordinate.
     *
     * @param clickedButton [jQuery object] of the button that was clicked.
     */
    function addCoordEntry(clickedButton) {
      var buttonParent = clickedButton.parent();
      // Get a blank set of coordinates.
      var emptyCoords = $('#coord_template').html();
      // Insert them into the DOM.
      buttonParent.after(emptyCoords);
      var newParent = buttonParent.next();
      // Initialize event listeners for new buttons.
      $(newParent).find('.ui-icon-shuffle').bind('click', function() {
        changeInputMethod($(this));
      });
      $(newParent).find('.ui-icon-minus').bind('click', function() {
        removeCoordEntry($(this));
      });
      $(newParent).find('.ui-icon-plus').bind('click', function() {
        addCoordEntry($(this));
      });
    }

    /***********
	/ Extract and return the expiration date and time from a SIGMET Text
	*/
	function extractExpiration(sigmetText)
    {
	    //Find the VALID keyword
	    var startPos = sigmetText.indexOf('VALID');

	    //extract the number string
	    //We assume format ddhhmm/ddhhmm
	    var periodStr = sigmetText.substr(startPos+6,13);

	    return periodStr.substr(periodStr.indexOf('/')+1,6);

    }

    
    /*
     * Automatically plot a SIGMET based on the SIGMET string.
     */

     function autoPlotSigmet(sigmetText) {
      // SigmetData is what we will manupulate, sigmetText is original text.
      var sigmetData = $(sigmetText).html();
      var sigmetText = sigmetData.replace(/(<br>)|(<br \/>)|(<p>)|(<\/p>)/g, '\r\n');
      sigmetData = sigmetText.replace(/(\r\n|\n|\r)/gm,' ');
      
      // Extract SIGMET ID.
      var sigmetID = sigmetData.substr(sigmetData.indexOf('SIGMET')+7,2).substr(0,2); 
      // Verify SIGMET isn't already plotted.
      var currSigmetIDs = $('#sigmet_tabs_div').find('input[name=sigmet_id]');
      while (currSigmetIDs.size() > 0) {
        if(currSigmetIDs.first().val() == sigmetID) {
          alert('SIGMET ' + sigmetID + ' is already plotted. Close it or pick another.');
          return;
        }
        currSigmetIDs = currSigmetIDs.not(currSigmetIDs.first());
      }
      
      // Extract radius if there is one, otherwise use 0NM.
      var radius = 0;
      // If the first character is a number, extract the radius.
      if (!isNaN(sigmetData.substr(sigmetData.indexOf('WTN'),10).substr(4,2))) {
        radius = sigmetData.substr(sigmetData.indexOf('WTN'),10).substr(4,2);
      }
            
      // Extract lat/lng points which are delimited by /'s.
      var coordinateArray = new Array();

      var locationData = sigmetData;
      var slashIndex = locationData.indexOf('/N');
      while (slashIndex >= 0) {
		var tempCoord = new Array();

        // Extract Lat and Long.
        
        // Store lat and long in tempCoord.
        tempCoord.push(locationData.substr(slashIndex+2,4));

      	//Look for W after North coord and take next 5 char
        var w_pos = locationData.substr(slashIndex+2,30).indexOf('W');
		tempCoord.push(locationData.substr(slashIndex+2,30).substr(w_pos+1,5));

        // Now push that coordinate onto the array.
        coordinateArray.push(tempCoord);
        // Now move slashIndex to the next / after nextSlashIndex.
        slashIndex = locationData.indexOf('/N', slashIndex + 1);
      }
      
      // Determine how many coordinate entry boxes will be needed.
      var numCoords = coordinateArray.length;
      
      // Add SIGMET tab by simulating click on the add SIGMET button
      // and get object reference to that tab.
      $('#add_sigmet').click();
      var currTab = $('#sigmet_tabs_div > .ui-tabs-panel:not(.ui-tabs-hide)');
      
      // Add the required number of coordinate entry boxes. NB: There is 1 by default.
      var addTabButton = currTab.find('.ui-icon-plus:first');
      for (i = 1; i < numCoords; ++i) {
        addTabButton.click();
      }
      
      // Set SIGMET ID.
      currTab.find('input[name=sigmet_id]').val(sigmetID);

      /*
      // Check "close area" box if it should be.
      if (isArea) {
        currTab.find('input[name=closed_area]').prop('checked', true);
      }*/
      
      // Set the radius.
      currTab.find('input[name=sigmet_radius]').val(radius);
      
      // Set the coordinates.
      // First get all the lat and long input boxes.
      var latBoxes = currTab.find('input[name=lat]');
      var longBoxes = currTab.find('input[name=lng]');
      
      // Now parse coordinates one by one.
      while (coordinateArray.length > 0) {
        var tempCoord = coordinateArray.shift();
        $(latBoxes).first().val(tempCoord[0]);
        $(longBoxes).first().val(tempCoord[1]);
        latBoxes = $(latBoxes).not($(latBoxes).first());
        longBoxes = $(longBoxes).not($(longBoxes).first());
      }
      
      // Copy the full text in the textarea in proper format.
      currTab.find('textarea[name=text]').val(sigmetText);
      
      // Close the modal dialog box.
      $('#modal_sigmet').dialog('close');
      
      // Plot the sigmet.
      currTab.find('button[name=plot_data]').click();
    }

/*
 * Remake of the autoload sigmet functions to work with new format
 */
 	function autoSigmet()
	{
	    // Add loading notification
	    var filename = 'http://anyorigin.com/get?url=http%3A//aviationweather.gov/data/iffdp/6440.txt&callback=?';
	    var sigmetDiv = $('#modal_sigmet');
	    sigmetDiv.dialog('open');
	    sigmetDiv.append('<p>Loading data, please wait...</p>');
	    
	    // Load the file containing SIGMET data from NOAA and put it in a JSON array
	    $.getJSON(filename, function(data){  
	      	var sigmetReqLines = data.contents.split("\n");

	    	//Discard header that are not Sigmet
			while (sigmetReqLines[0].substr(0,4) != "WSCN")
			{
				sigmetReqLines.shift();
			}

			//Discard trailing lines that are not SIGMET
			
			//Check if last entry is a Sigmet or not
			if (sigmetReqLines[sigmetReqLines.length-2].substr(0,2)== "No")
			{
				//Remove empty last line and no sigmet line
				sigmetReqLines.pop();
				sigmetReqLines.pop();
			}
			//Scan end of results to remove no sigmet lines
			while (sigmetReqLines[sigmetReqLines.length-1].substr(0,2)== "No")
			{
				sigmetReqLines.pop();
			}

			var rawSigmet = new Array();

			//While ther is data to add
			while (sigmetReqLines.length >= 1)
			{
				var sigmettext ="";
				while (sigmetReqLines[0] !="")
				{
					sigmettext += sigmetReqLines[0];
					sigmettext += " <br> ";
					sigmetReqLines.shift();
				}
				//Delete the empty line that remain
				sigmetReqLines.shift();

				//Check if sigmet is domestic format if not, discard
				if (sigmettext.substr(4,2) >= 20)
					//Add Sigmet to array
					rawSigmet.push(sigmettext);
				
			}

			//Scan for duplicates and cancellation and remove old data
			var pos_cur = 0;
			while (pos_cur < rawSigmet.length)
			{
				//Check if it is a Cancel, if so remove it, if not, check for newet
				if (rawSigmet[pos_cur].indexOf('CNCL') >= 0)
					rawSigmet.splice(pos_cur,1);
				else
				{
						
					//Extract letter and number of the Sigmet
					var curSigmetNumber = rawSigmet[pos_cur].substr(rawSigmet[pos_cur].indexOf('SIGMET')+7,2);
					var curFIR = rawSigmet[pos_cur].substr(rawSigmet[pos_cur].indexOf('CZ'),4);
	
					//Scan the remainder of Sigmet for newer, we only look at those after the current line, the others are already newest
					for (pos_comp=0;pos_comp < (rawSigmet.length);pos_comp++)
					{
						//If checking current position, skip
						if(pos_comp!=pos_cur)
						{
							//Check if it is the same letter and FIR
							if ((curSigmetNumber.substr(0,1) == rawSigmet[pos_comp].substr(rawSigmet[pos_comp].indexOf('SIGMET')+7,1))
								&& (curFIR == rawSigmet[pos_comp].substr(rawSigmet[pos_comp].indexOf('CZ'),4)))
							{
								//Check if date is higher
								
								
								//if (curSigmetNumber.substr(1,1) >= rawSigmet[pos_comp].substr(rawSigmet[pos_comp].indexOf('SIGMET')+8,1))
								
								var current = rawSigmet[pos_cur];
								var compare = rawSigmet[pos_comp];

								var date_current = extractExpiration(current).substr(0,2);
								var date_compare =  extractExpiration(compare).substr(0,2);

								var time_current = extractExpiration(current).substr(2,4);
								var time_compare = extractExpiration(compare).substr(2,4);

								
								//Check if date is more recent
								 
								if (
										//Currect date is lower 
										(date_current > date_compare)
										
										//If we skip a month, we assume there will never be data for a whole month in the input data
										| ((date_current < 10) && (date_compare > 20))
										//Date is same and time is later
										| (date_current == date_compare) && (time_current > time_compare)
									)
									//current is higher so we remove the other one
									rawSigmet.splice(pos_comp,1);
								else
								{
									//current is older, remove it
									rawSigmet.splice(pos_cur,1);
									//Nullify pos_cur++ after loop to remain at current position in rawSigmet since we removed and entry
									pos_cur--;
									break;
								}
							}
						}
					}
					pos_cur++;
				}
			}

			
			//Remove waiting header and add SIGMET that remains to the display
			sigmetDiv.children('p').remove();
			sigmetDiv.children('h3').empty().append('Select SIGMET to plot...');
			
			for (cpt =0;cpt<rawSigmet.length;cpt++)
			{		
				sigmetDiv.append('<p class=\'active\'>' + rawSigmet[cpt] + '<br></p>');
			}
			
			//Add click binding
			sigmetDiv.children('p.active').css('cursor','pointer').bind('click',
					function(){
						autoPlotSigmet(this);
					});
			
	   	});
	}

	
	
    /*
     * Determines if a point is within a polygon. Based on the PNPOLY FORTRAN
     * code written at University of Ottawa by W. Randolf Franklin in 1970.
     *
     * @returns [Boolean] True if the point is within the polygon, false
     *      otherwise.
     */
    function pInArea(coords, point) {
      var nvert = coords.length;
      /* Modify at your own risk. No copyright disclaimer was available from
       * the original author so the code has been used in good faith under
       * fair use.
       */
      // The original application uses arrays of floats not Google maps
      // latlng. For ease of converting to JavaScript, build the arrays as
      // used in the original algorithm.
      var verty = [];
      var vertx = [];
      for(var i = 0; i < nvert; ++i) {
        verty[i] = coords[i].lat();
        vertx[i] = coords[i].lng();
      }
      // Break the point down to lattitude and longitude.
      var testy = point.lat();
      var testx = point.lng();

      // The following is the original author's algorithm as he wrote it in C,
      // changed only to implicitely scope counter variables i and j.
      var c = 0;
      for (var i = 0, j = nvert-1; i < nvert; j = i++) {
        if ( ((verty[i]>testy) != (verty[j]>testy)) &&
          (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) /
              (verty[j]-verty[i]) + vertx[i]) )
            c = !c;
        }
      return c;
    }

    /*
     * Determines which RCO's need to be broadcast and set their colour. Other
     * RCO's will be reset to default.
     *
     * @param tab [jQuery Object] The tab containing the data to examine.
     */
    function calcBcast(tab) {
      // If the tab passed is null, reset all RCO's to default and return.
      if(tab == null) {
        for(var i = 0; i < markerVars.length; ++i) {
          var rcoName = markerVars[i].getTitle().substr(0, 2);
          var iconURL = MARKER_BASE_URL.replace('FFFFFF', MARKER_COLOUR) +
              rcoName;
          markerVars[i].setOptions({icon: iconURL});
        }
        return;
      }
      // Retrieve the map plot data from the tab.
      var mapPlots = $(tab).data('map_plots');
      // If the data doesn't need to be broadcast, we're done.
      if(typeof(mapPlots) == 'undefined' || mapPlots[0] == 'UA' 
          || mapPlots[0] == 'NOTAM') {
        return;
      }
      // If it's an urgent pirep, calculate distance from marker.
      if(mapPlots[0] == 'UUA') {
        for(var i = 0; i < markerVars.length; ++i) {
          var rcoName = markerVars[i].getTitle().substr(0, 2);
          // Start with default marker URL.
          var iconURL = MARKER_BASE_URL.replace('FFFFFF', MARKER_COLOUR) +
              rcoName;
          // If it's within 150NM (277,800m), set RCO marker to urgent pirep
          // colour.
          if(google.maps.geometry.spherical.computeDistanceBetween(
              markerVars[i].getPosition(), mapPlots[2].getPosition()) <=
              277800) {
            iconURL = MARKER_BASE_URL.replace('FFFFFF', URGENT_PIREP_COLOUR) +
              rcoName;
          }
          markerVars[i].setOptions({icon: iconURL});
        }
      }
      // If it's a sigmet, calculate if it's within the area.
      else {
        var path = mapPlots[mapPlots.length - 1].getPath();
        // Get the array of coordinates from the path.
        var coords = path.getArray();
        // If an RCO marker is within the broadcast range, make it the same
        // colour as the sigmet.
        for(var i = 0; i < markerVars.length; ++i) {
          var rcoName = markerVars[i].getTitle().substr(0, 2);
          // Start with default marker URL.
          var iconURL = MARKER_BASE_URL.replace('FFFFFF', MARKER_COLOUR) +
              rcoName;
          // If the marker is within the defined area, set the RCO to the
          // SIGMET colour.
          if(pInArea(coords, markerVars[i].getPosition())) {
            iconURL = MARKER_BASE_URL.replace('FFFFFF', SIGMET_COLOUR) +
              rcoName;
          }
          markerVars[i].setOptions({icon: iconURL});
        }
      }
    }

    /*
     * Extracts input data from the DOM elements.
     *
     * @param tab [jQuery object] The active SIGMET tab.
     * @param callback [Function] The callback function; takes extracted
     *      coordinates as a parameter.
     * @throws [String] If coordinate data does not match type of data input
     *      or if coordinates are invalid.
     */
    function extractInput(tab, callback) {
      // Start with an empty array.
      var extractedCoords = [];
      // Get the coordinate unput fields.
      var inputData = $(tab).find('.coordinate');
      // Iteratre over each set of coordinates input.
      for(var i = 0; i < inputData.length; ++i) {
        // Only extract data from the non-hidden input method.
        var currCoord = $(inputData[i]).children('div:not(.hidden)');
        // Processing varies depending on if coordinates are entered via
        // coordinates or ICAO code.
        if($(currCoord).hasClass('coord_entry')) {
          // Extract coordinate and remove any spaces that may exist.
          var lat = $(currCoord).find('[name=lat]').val().replace(' ', '');
          var lng = $(currCoord).find('[name=lng]').val().replace(' ', '');
          // Only process if both lat and lng are not blank, otherwise move on
          // to the next set.
          if(!(lat == '' && lng == '')) {
            // If only one coordinate is empty or if either contains invalid
            // input, throw an exception.
            if(isNaN(lat) || isNaN(lng) || lat == '' || lng == '') {
              throw('Coordinates contain invalid data.');
            }
            // If the number is in decimal format it will have a decimal.
            if(lat.indexOf('.') != -1) {
              // Only processing needed is to convert to float.
              lat = +lat;
            }
            // Otherwise it's an integer and can be parsed.
            else {
              lat = parseCoord(lat);
            }
            // Do the same for lng.
            if(lng.indexOf('.') != -1) {
              lng = +lng;
            }
            else {
              lng = parseCoord(lng);
            }
            // Assign new coordData object to the appropriate index.
            // NB: This is done instead of push() because ICAO coords are
            // retrieved asynchronously but the order must be maintained.
            extractedCoords[i] = new coordData('coord', lat, lng);
          }
        }
        // If it's not coordinate entry, it must be ICAO.
        else {
          // Extract bearing and range, remove all whitespace and forward
          // slashes.
          var brngRng = $(currCoord).find('[name=brng_rng]').val()
              .replace(' ', '').replace('/', '');
          var bearing, range;
          // If the text box was empty, set it to 0.
          if(brngRng == '') {
            brngRng = 0;
            bearing = 0;
            range = 0;
          }
          // Otherwise extract the values.
          else {
            // brngRng must be at least 4 characters long.
            if(brngRng.length < 4 && brngRng != 0) {
              throw('Bearing/Range is not valid.');
            }
            // If brngRange isn't 0, extract bearing and range.
            // NB: 1852m per NM
            bearing = brngRng.substr(0, 3);
            range = brngRng.slice(3) * 1852;
            if(isNaN(bearing) || isNaN(range)) {
              throw('Bearing/Range is not valid.');
            }
          }
          // Extract ICAO code
          var icaoCode = $(currCoord).find('[name=icao_ident]').val();
          // If icaoCode is valid, it will be either 3 or 4 characters long.
          if(icaoCode.length != 3 && icaoCode.length != 4) {
            throw('Invalid location code.');
          }
          // If the length is 3, assume Canadian identifier and prepend a C.
          if(icaoCode.length == 3) {
            icaoCode = 'C' + icaoCode;
          }
          // Assign new coordData object to the appropriate index.
          // NB: This is done instead of push() because ICAO coords are
          // retrieved asynchronously but the order must be maintained.
          extractedCoords[i] = new coordData('icao', bearing, range,
              icaoCode);
        }
      }
      // Execute the callback.
      if(typeof callback == 'function') {
        callback(extractedCoords);
      }
    }

    /*
     * Recursively extract coordinate from input data. Strip last array
     * element for later processing, than call itself on remaining elements.
     * When only 1 element remains, extract coordinates and recurse through
     * callbacks. Finally, send array of input coordinates to original
     * callback.
     *
     * @param inputData [Array of coordData] The input data to be geocoded.
     * @param callback [Function] The callback function.
     * @throws Any errors returned by Google Maps geocoder.
     */
    function geocodeCoords(inputData, callback) {
      // If inputData is empty, create an empty array and pass it to the
      // callback.
      if(inputData.length < 1) {
        var inputCoords = [];
        callback(inputCoords);
      }
      else {
        // Remove the last element in the array and save it for later
        // processing.
        var lastElement = inputData.pop();
        // Recurse, process lastElement in callback.
        geocodeCoords(inputData, function(inputCoords) {
          // If coordinate is in 'coord' format, convert it to Google Maps
          // LatLng and add it to array.
          if(lastElement.format == 'coord') {
            inputCoords.push(new google.maps.LatLng(lastElement.lat,  0 -
                lastElement.lng));
            callback(inputCoords);
          }
          else {
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': lastElement.icao },
                function (results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                inputCoords.push(google.maps.geometry.spherical
                    .computeOffset(results[0].geometry.location,
                  lastElement.range, lastElement.bearing));
                  callback(inputCoords);
              }
              else {
                throw('No results found: ' + status);
              }
            });
          }
        });
      }
    }

    /*
     * Gets the coordinates of the buffer polygon and passes them to the
     * callback. This is done using arcGIS services.
     *
     * @param inputCoords [Array of LatLng] The coordinates entered.
     * @param bufferRadius [Number] The buffer radius.
     * @param bcast [Boolean] True if a 150NM bcast buffer is required.
     * @param callback [Function] The callback function, takes array of
     *        buffers as parameter.
     * @throws Any returned by arcGIS service.
     */
    function getBufferCoords(inputCoords, bufferRadius, bcast, callback) {
      // Create empty array to hold parameters for callback.
      var buffers = [];
      // Assume a buffer was requested, it will be set later if one was.
      var noBuffer = false;
      // If bufferRadius is 0, create an unbuffered line or shape as
      // appropriate.
      if(bufferRadius == 0) {
        // If the first and last point are different, draw a line.
        if(inputCoords[0] != inputCoords[inputCoords.length - 1]) {
          var tempBuffer = new google.maps.Polyline;
        }
        // Otherwise, draw a shape.
        else {
          var tempBuffer = new google.maps.Polygon;
        }
        tempBuffer.setOptions({path: inputCoords});
        buffers.push(tempBuffer);
        // If bcast is false, return now as no buffer is needed (NB: still in
        // buffer == 0 loop)
        if(!bcast) {
          callback(buffers);
          return;
        }

        // If bcast is true, we need a 150nm buffer anyways, so set
        // bufferRadius and note that no buffer was requested.
        bufferRadius = 277800;
        noBuffer = true;
      }

      // Setup the arcGIS variables.
      var url = "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer"
      var svc = new gmaps.ags.GeometryService(url);

      var geometry;
      // If there's only one point, process it as a point.
      if(inputCoords.length == 1) {
        geometry = inputCoords[0];
      }
      // Otherwise, if the first and last coords are the same, use a polygon.
      else if(inputCoords[0] == inputCoords[inputCoords.length - 1]) {
        geometry = new google.maps.Polygon({
          path: inputCoords
        });
      }
      // Otherwise, use a polyline.
      else {
        geometry = new google.maps.Polyline({
          path: inputCoords
        });
      }

      var params = {
        geometries: [geometry],
        geodesic: true,
        bufferSpatialReference: 3161,
        distances: [bufferRadius],
        unit: 9001,
        unionResults: false
      };
      svc.buffer(params, function(results, err) {
        if (!err) {
          var obj = results;
          buffers.push(results.geometries[0][0]);
          // If bcast is true and a buffer was requested, then a 2nd buffer
          // for the 150NM bcast range is needed.
          if(bcast && !noBuffer) {
            var params = {
              geometries: [geometry],
              bufferSpatialReference: 3161,
              distances: [bufferRadius + 277800],
              unit: 9001,
              unionResults: false
            };
            svc.buffer(params, function(results, err) {
              if (!err) {
                buffers.push(results.geometries[0][0]);
                callback(buffers);
                return;
              } else {
                throw(err.message + err.details.join(','));
              }
            });
          }
          else {
            callback(buffers);
            return;
          }
        } else {
          throw(err.message + err.details.join(','));
        }
      });
    }

    /*
     * Plots a SIGMET after extracting required information from form
     * elements.
     *
     * @param tab [jQuery object] The active SIGMET tab.
     */
    function plotSigmet(tab) {
      // Show loading spinner.
      $(tab).find('.data_load').removeClass('hidden');

      // If the plot is of an area, closeShape will be true.
      var closeShape = $(tab).find('[name=closed_area]').attr('checked');
      // If the user wants to plot a 2nd buffer at 150NM, add150 will be true.
      var show150 = $(tab).find('[name=plot_150]').attr('checked');

      // Update tab title if SIGMET ID was entered.
      var sigmetID = $(tab).find('[name=sigmet_id]').val().toUpperCase();
      if(sigmetID != '') {
        $('#sigmet_tabs').children('.ui-tabs-selected').find('a')
            .text(sigmetID);
      }
      // Extract buffer radius, set it to 0 if the box was empty.
      var sigmetRadius = getRadius($(tab).find('[name=sigmet_radius]'));
      if(sigmetRadius == '') {
        sigmetRadius = 0;
      }
      sigmetRadius = sigmetRadius;
      try {
        // Extract coordinates, the coords param in the callback function will
        // be the extracted coords.
        extractInput(tab, function(inputData) {
          // If the SIGMET is a single point and no radius was supplied, set a
          // radius otherwise nothing will be drawn. NB: The radius of 4000m
          // here was chosen arbitrarily based on trial and error.
          if(inputData.length == 1 && sigmetRadius == 0)  {
            sigmetRadius = 4000;
          }
          // If shape is closed but the closed box isn't checked, check it.
          if(inputData.length > 1 && inputData[0]
              .equals(inputData[inputData.length - 1])) {
            closeShape = true;
            $(tab).find('[name=closed_area]').attr('checked', 'checked');
          }
          // Geocode the coordinates where applicable.
          geocodeCoords(inputData, function(inputCoords) {
            // If the shape is supposed to be closed, close it if it isn't
            // already.
            if(closeShape && !inputCoords[0]
                .equals(inputCoords[inputCoords.length - 1])) {
              inputCoords.push(inputCoords[0]);
            }
            // Plot may have multiple parts, store them in an array.
            var sigmetPlots = [];
            // The 1st element is the plot type.
            sigmetPlots.push('SIGMET');
            // The 2nd variable will store whether the 150NM buffer should be
            // displayed or not.
            sigmetPlots.push(show150);
            getBufferCoords(inputCoords, sigmetRadius, true,
                function(buffers) {
              // Draw the buffers if there were any.
              for(var i = 0; i < buffers.length; ++i) {
                // Don't show the last buffer if show150 is false.
                if(i < buffers.length - 1 || show150) {
                  buffers[i].setOptions({
                    strokeColor: '#' + SIGMET_COLOUR,
                    strokeOpacity: 1.0,
                    strokeWeight: 3,
                    fillColor: '#' + SIGMET_FILL,
                    fillOpacity: 0.1,
                    geodesic: true,
                    clickable: true,
                    title: 'SIGMET' + sigmetID,
                    map: myMap,
                    zIndex: currZIndex++
                  });
                }
                sigmetPlots.push(buffers[i]);
              }

              // Attach variables to DOM.
              $(tab).data('map_plots', sigmetPlots);

              // Create event listeners for all plots.
              for(var i = 2; i < sigmetPlots.length; ++i) {
                var plot = sigmetPlots[i];
                // Darken the fill on mouseover.
                google.maps.event.addListener(plot, 'mouseover', function() {
                  this.setOptions({fillOpacity:0.7});
                });
                // Lighten the fill and close info on mouseout.
                google.maps.event.addListener(plot, 'mouseout', function() {
                  this.setOptions({fillOpacity:0.1});
                });
                // Hide the plotted data if clicked.
                google.maps.event.addListener(plot, 'click', function() {
                  hidePlot(tab);
                });
              }
              // Remove old backup if there is one.
              var oldBackup = $('#backup-' + $(tab).attr('id'));
              if(oldBackup.length) {
                var oldPlots = oldBackup.data('map_plots');
                for(var i = 2; i < oldPlots.length; ++i) {
                  oldPlots[i].setMap(null);
                }
                oldBackup.remove();
              }

              // Calculate bcast RCO's.
              calcBcast(tab);

              // Hide "Plot Data" and "show" buttons and show "Update" and
              // "Hide" buttons.
              $(tab).find('[name=plot_data]').addClass('hidden');
              $(tab).find('[name=show]').addClass('hidden');
              $(tab).find('[name=update]').removeClass('hidden');
              $(tab).find('[name=hide]').removeClass('hidden');
              // Hide loading spinner.
              $(tab).find('.data_load').addClass('hidden');

              // Create backup.
              $(tab).clone(true).attr('id', 'backup-' + $(tab).attr('id'))
                  .appendTo($('#sigmet_backups'));
            });
          });
        });
      }
      catch(err) {
        alert(err);
        $(tab).find('.data_load').addClass('hidden');
      }
    }

    /*
     * Plots a PIREP after extracting required information from form elements.
     *
     * @param tab [jQuery object] The active PIREP tab.
     */
    function plotPirep(tab) {
      // urgent will be true if PIREP is UUA.
      var urgent = $(tab).find('[name=urgent]').attr('checked');
      // If user wants to display 150nm ring around pirep location, add150
      // will be true.
      var show150 = $(tab).find('[name=plot_150]').attr('checked');

      // Show loading spinner.
      $(tab).find('.data_load').removeClass('hidden');
      // Update tab title if PIREP title was entered and store variable to
      // assign to map marker.
      var pirepID = $(tab).find('[name=pirep_id]').val().toUpperCase();
      if(pirepID != '') {
        var pirepTitle = pirepID;
        $('#pirep_tabs').children('.ui-tabs-selected').find('a').text(pirepID);
      }
      else {
        var pirepTitle = 'Pirep New ' + $(tab).attr('id').substr(9);
      }

      try {
        // Extract coordinates, the coords param in the callback function will
        // be the extracted coords.
        extractInput(tab, function(inputData) {
          // Geocode the coordinates.
          geocodeCoords(inputData, function(inputCoords) {
            // Get colour based on if it's a UUA or not and set marker label.
            if(urgent) {
              var pirepColour = URGENT_PIREP_COLOUR;
              var pirepLabel = 'UUA';
            }
            else {
              var pirepColour = PIREP_COLOUR;
              var pirepLabel = 'UA';
            }
            var iconURL = MARKER_BASE_URL.replace('FFFFFF', pirepColour) +
                pirepLabel;
            // Plot may have multiple parts, store them in an array.
            var pirepPlots = [];
            // 1st entry will be the plot type.
            pirepPlots.push(pirepLabel);
            // 2nd entry will be whether or not to display 150NM ring.
            pirepPlots.push(show150);
            // Place marker.
            var marker = new google.maps.Marker({
              map: myMap,
              position: inputCoords[0],
              title: pirepTitle,
              icon: iconURL
            });

            // Add the marker to the data variable.
            pirepPlots.push(marker);

            // Create 150NM ring. NB: 150nm is 277,800m
            var pirepRing = new google.maps.Circle({
              center: inputCoords[0],
              radius: 277800,
              strokeColor: '#' + pirepColour,
              strokeOpacity: 1.0,
              strokeWeight: 3,
              fillColor: '#' + pirepColour,
              fillOpacity: 0.1,
              clickable: true,
              geodesic: true,
              map: null
            });

            // Display the 150NM ring if requested.
            if(show150) {
              pirepRing.setOptions({
                map: myMap,
                zIndex: currZIndex++
              });
            }

            // Create event listeners for the plots and marker
            // Darken the fill on mouseover.
            google.maps.event.addListener(pirepRing, 'mouseover',
                function() {
              this.setOptions({fillOpacity:0.7});
            });
            google.maps.event.addListener(pirepPlots[2], 'mouseover',
                function() {
              pirepRing.setOptions({fillOpacity:0.7});
            });
            // Lighten the fill and close info on mouseout.
            google.maps.event.addListener(pirepRing, 'mouseout',
                function() {
              this.setOptions({fillOpacity:0.1});
            });
            google.maps.event.addListener(pirepPlots[2], 'mouseout',
                function() {
              pirepRing.setOptions({fillOpacity:0.1});
            });
            google.maps.event.addListener(pirepRing, 'click',
                function() {
              hidePlot(tab);
            });
            // Add ring to the data variable.
            pirepPlots.push(pirepRing);

            // Create event listener to hide the plots if the marker is
            // clicked.
            google.maps.event.addListener(pirepPlots[2], 'click', function() {
              hidePlot(tab);
            });

            // Attach variables to DOM.
            $(tab).data('map_plots', pirepPlots);

            // Remove old backup if there is one.
            var oldBackup = $('#backup-' + $(tab).attr('id'));
            if(oldBackup.length) {
              var oldPlots = oldBackup.data('map_plots');
              // Start at 1 because index 0 is a boolean on whether or not to
              // display 150NM ring.
              for(var i = 2; i < oldPlots.length; ++i) {
                oldPlots[i].setMap(null);
              }
              oldBackup.remove();
            }

            // Calculate broadcast RCO's.
            calcBcast(tab);

            // Hide "Plot Data" and "show" buttons and show "Update" and
            // "Hide" buttons.
            $(tab).find('[name=plot_data]').addClass('hidden');
            $(tab).find('[name=show]').addClass('hidden');
            $(tab).find('[name=update]').removeClass('hidden');
            $(tab).find('[name=hide]').removeClass('hidden');
            // Hide loading spinner.
            $(tab).find('.data_load').addClass('hidden');

            // Create backup.
            $(tab).clone(true).attr('id', 'backup-' + $(tab).attr('id'))
                .appendTo($('#pirep_backups'));
          });
        });
      }
      catch(err) {
        alert(err);
        $(tab).find('.data_load').addClass('hidden');
      }
    }

    /*
     * Plots a NOTAM after extracting required information from form elements.
     *
     * @param tab [jQuery object] The active NOTAM tab.
     */
    function plotNotam(tab) {
      // If the plot is of an area, closeShape will be true.
      var closeShape = $(tab).find('[name=closed_area]').attr('checked');

      // Show loading spinner.
      $(tab).find('.data_load').removeClass('hidden');

      // Update tab title if NOTAM ID was entered.
      var notamID = $(tab).find('[name=notam_id]').val().toUpperCase();
      if(notamID != '') {
        $('#notam_tabs').children('.ui-tabs-selected').find('a')
            .text(notamID);
      }

      // Extract buffer radius, set it to 0 if the box was empty.
      var notamRadius = getRadius($(tab).find('[name=notam_radius]'));
      if(notamRadius == '') {
        notamRadius = 0;
      }

      try {
        // Extract coordinates, the coords param in the callback function will
        // be the extracted coords.
        extractInput(tab, function(inputData) {
          // If the NOTAM is a single point and no radius was supplied, set a
          // radius otherwise nothing will be drawn. NB: The radius of 4000m
          // here was chosen arbitrarily based on trial and error.
          if(inputData.length == 1 && notamRadius == 0)  {
            notamRadius = 4000;
          }
          // If shape is closed but the closed box isn't checked, check it.
          // NB: If there are only 2 coordinates, shape is a line and can't be
          // closed.
          if(inputData.length > 2 && inputData[0]
              .equals(inputData[inputData.length - 1])) {
            closeShape = true;
            $(tab).find('[name=closed_area]').attr('checked', 'checked');
          }
          // Geocode the coordinates where applicable.
          geocodeCoords(inputData, function(inputCoords) {
            // If the shape is supposed to be closed, close it if it isn't
            // already.
            if(closeShape && !inputCoords[0]
                .equals(inputCoords[inputCoords.length - 1])) {
              inputCoords.push(inputCoords[0]);
            }
            // Plot may have multiple parts, store them in an array.
            var notamPlots = [];
            // The 1st entry will be the plot type.
            notamPlots.push('NOTAM');
            // The last plot should always be displayed as there is no 150NM
            // bcast buffer.
            notamPlots.push(true);

            getBufferCoords(inputCoords, notamRadius, false,
                function(buffers) {
              // Draw the buffers if there were any.
              for(var i = 0; i < buffers.length; ++i) {
                buffers[i].setOptions({
                  strokeColor: '#' + NOTAM_COLOUR,
                  strokeOpacity: 1.0,
                  strokeWeight: 3,
                  fillColor: '#' + NOTAM_FILL,
                  fillOpacity: 0.3,
                  geodesic: true,
                  clickable: true,
                  title: 'NOTAM ' + notamID,
                  map: myMap,
                  zIndex: currZIndex++
                });
                notamPlots.push(buffers[i]);
              }

              // Attach variables to DOM.
              $(tab).data('map_plots', notamPlots);

              // Create event listeners for all plots.
              for(var i = 2; i < notamPlots.length; ++i) {
                var plot = notamPlots[i];
                // Darken the fill on mouseover.
                google.maps.event.addListener(plot, 'mouseover', function() {
                  this.setOptions({fillOpacity:0.7});
                });
                // Lighten the fill and close info on mouseout.
                google.maps.event.addListener(plot, 'mouseout', function() {
                  this.setOptions({fillOpacity:0.3});
                });
                // Hide the plotted data if clicked.
                google.maps.event.addListener(plot, 'click', function() {
                  hidePlot(tab);
                });
              }
              // Remove old backup if there is one.
              var oldBackup = $('#backup-' + $(tab).attr('id'));
              if(oldBackup.length) {
                var oldPlots = oldBackup.data('map_plots');
                for(var i = 2; i < oldPlots.length; ++i) {
                  oldPlots[i].setMap(null);
                }
                oldBackup.remove();
              }

              // Hide "Plot Data" and "show" buttons and show "Update" and
              // "Hide" buttons.
              $(tab).find('[name=plot_data]').addClass('hidden');
              $(tab).find('[name=show]').addClass('hidden');
              $(tab).find('[name=update]').removeClass('hidden');
              $(tab).find('[name=hide]').removeClass('hidden');
              // Hide loading spinner.
              $(tab).find('.data_load').addClass('hidden');

              // Create backup.
              $(tab).clone(true).attr('id', 'backup-' + $(tab).attr('id'))
                  .appendTo($('#notam_backups'));
            });
          });
        });
      }
      catch(err) {
        alert(err);
        $(tab).find('.data_load').addClass('hidden');
      }
    }

    /*
     * Initializes the application by loading the map and assets, configuring
     * listeners and setting up the UI.
     */
    function init() {
      // Start loading in the map.
      myMap = new google.maps.Map(document.getElementById('left_panel'), {
        zoom:5,
        center:MAP_CENTER,
        mapTypeId:google.maps.MapTypeId.ROADMAP,
        streetViewControl:false,
        panControl:false,
        mapTypeControlOptions:{
          position: google.maps.ControlPosition.TOP_LEFT
        },
        zoomControlOptions:{
          position: google.maps.ControlPosition.LEFT_TOP
        }
      });

      // Align title to right of map.
      $('#title').css('right', $('#right_panel').width());

      // Set the default value of the ring radius.
      $('#ring_radius').attr('value', '150');
      $('#ring_radius').bind('keyup', redrawRings);
      $('#ring_radius').bind('blur', function() {
        if($(this).attr('value') == '' || isNaN(parseInt($(this)
            .attr('value'), 10))) {
          $(this).attr('value', '0');
          redrawRings();
        }
      });

      // Generate the checkboxes.
      createCheckboxList();

      // Setup jQuery UI elements.
      $('.button, button').button();
      $('.radio_button').buttonset();
      $('#right_panel').accordion({
        fillSpace:true,
        collapsible:false,
        header:'h2',
        active: 0,
        // Create binding for change event to calculate broadcast when tab is
        // changed.
        change: function(event, ui) {
          var newType = $(ui.newContent).attr('id');
          // Calculations are only needed with sigmets, pireps and notams.
          if(newType == 'sigmets' || newType == 'pireps' ||
              newType == 'notams') {
            var newTypeTabs = newType.slice(0, -1) + '_tabs';
            // If there are no tabs, reset markers to defaults.
            if($('#' + newType).find('.ui-tabs-panel:not(.ui-tabs-hide)')
                .length < 1) {
              calcBcast(null);
            }
            // Otherwise, calculate broadcast for active tab and bring map
            // plots to front.
            else {
              var plottedData = $('#' + newType)
                  .find('.ui-tabs-panel:not(.ui-tabs-hide)')
                  .data('map_plots');
              if(plottedData != undefined) {
                for(var i = 2; i < plottedData.length; ++i) {
                  plottedData[i].setOptions({zIndex: currZIndex++});
                }
                calcBcast($('#' + newType)
                    .find('.ui-tabs-panel:not(.ui-tabs-hide)'));
              }
              // If there is no plotted data, reset markers to default.
              else {
                calcBcast(null);
              }
            }
          }
          // Otherwise RCO selection or theme picker was selected and markers
          // should be set to default.
          else {
            calcBcast(null);
          }
        }
      });
      //$('#theme_roller').themeswitcher({loadTheme:'Cupertino'});

      // Keep right-panel accordian sized properly when window is resized and
      // ensure title and disclaimer are realigned.
      $(window).resize(function(){
        $("#right_panel").accordion("resize");
        $('#title').css('right', $('#right_panel').width());
      });

      // Plot RCO markers and draw rings, catch any exceptions.
      try {
        prepareMap();
      }
      catch(e) {
        $('#left_panel').addClass('hidden');
        $('#right_panel').addClass('hidden');
        $('#title').addClass('hidden');
        alert('Invalid coordinates listed for RCO locations.');
        return;
      }

      // Create help menu.
      $('#modal_help').dialog({
        autoOpen: false,
        modal: true,
        closeOnEscape: true,
        closeText: 'Close',
        resizable: false,
        width: $(window).width() * 0.8,
        height: $(window).height() * 0.8
      });
      $('#show_help').bind('click', function() {
        $('#modal_help').dialog('open');
      });
      
      // Create autoload SIGMET menu.
      $('#modal_sigmet').dialog({
        autoOpen: false,
        modal: true,
        closeOnEscape: true,
        closeText: 'Close',
        resizable: false,
        width: $(window).width() * 0.8,
        height: $(window).height() * 0.8,
        close: function(event, ui) {
          $('#modal_sigmet').empty().append('<h3>Autoload SIGMET</h3>');
        }
      });

      // Create tabbed areas.
      createTabs();
      $('#modal_help').tabs();

      // Create other triggers and actions.
      $('#mission_select > :radio').change(selectMission);
      $('.mission').bind('click', function() {
        toggleMission($(this));
      });
      $('.rco_box').bind('click', function() {
        toggleBox($(this));
      });
      $('#reset_rings').click(function() {
        $('#ring_radius').attr('value', '150');
        redrawRings();
      });
      $('.add_tab').bind('click', function() {
        addTab($(this).parent());
      });  
      $('.add_predef').bind('click',function(){
    	  addPredef($(this).parent());
      });
      $('.tabs').on('click', 'span.ui-icon-close', function() {
        var tabs = $(this).parents('.tabs');
        var index = $('li', $(tabs)).index($(this).parent());
        $(tabs).tabs('remove', index);
      });
      
      // Bind autload SIGMET button.
      $('#auto_sigmet').bind('click', function() {
        autoSigmet();
      });

      // Hide loading div and show titile when tiles are loaded.
      google.maps.event.addListener(myMap, "tilesloaded", function() {
        $('#loading').addClass('hidden');
      });
    }

    $(document).ready(init);
  </SCRIPT>

</head>
<body>
  <div id="loading"></div>
  <div id="left_panel" class="left_panel"></div>
  <div id="right_panel" class="right_panel ui-widget-content">
    <h2><a href="#">RCO and Mission Selection</a></h2>
    <div id="rco_configuration">
      <FORM class="center radio_button" id=mission_select autocomplete="off">
			<INPUT id=select_three_sector type=radio CHECKED name=mission > 
				<LABEL for=select_three_sector></LABEL>
				 
			<INPUT id=select_two_sector type=radio name=mission> 
				<LABEL for=select_two_sector></LABEL>
		</FORM>
		
		<FORM class="center top_margin" id=radius>
			<INPUT id=ring_radius onfocus=this.select() size=3> NM Rings
			<BUTTON class=top_margin id=reset_rings>Reset</BUTTON> 
		</FORM>
		
		<INPUT class=mission id=north type=checkbox CHECKED> 
		
		<LABEL for=north>North</LABEL>
		
		
		<DIV class=three_sectors>
			<DIV class=rco_boxes id=north2></DIV>
		</DIV>

		<DIV class="two_sectors hidden">
			<DIV class=rco_boxes id=north2></DIV>
		</DIV> 
		
		<DIV class=three_sectors>
			<DIV class=rco_boxes id=central3></DIV>
		</DIV>
		
		<INPUT class=mission id=south type=checkbox CHECKED> 
		<LABEL for=south>South</LABEL> 

		<DIV class=three_sectors>
			<DIV class=rco_boxes id=south2></DIV>
		</DIV>

		<DIV class="two_sectors hidden">
			<DIV class=rco_boxes id=south2></DIV>
		</DIV>

		<DIV class="center top_margin">
			<INPUT class=button id=hide_markers type=checkbox> 
			<LABEL for=hide_markers>Hide Markers</LABEL> 
		</DIV>
    </div>
    <h2><a href="#">SIGMETs</a></h2>
    <div id="sigmets">
      <button id="add_sigmet" class="bottom_margin add_tab">New SIGMET</button>
      <button id="auto_sigmet" class="bottom_margin">Autoload SIGMET</button>
      <div id="sigmet_tabs_div" class="tabs">
        <ul id="sigmet_tabs">
        </ul>
      </div>
    </div>
    <h2><a href="#">PIREPs</a></h2>
    <div id="pireps">
      <button id="add_pirep" class="bottom_margin add_tab">New PIREP</button>
      <div id="pirep_tabs_div" class="tabs">
        <ul id="pirep_tabs">
        </ul>
      </div>
    </div>
    <h2><a href="#">NOTAMs</a></h2>
    <div id="notams">
      <button id="add_notam" class="bottom_margin add_tab">New NOTAM</button>
      <div id="notam_tabs_div" class="tabs">
        <ul id="notam_tabs">
        </ul>
      </div>
    </div>
    <h2><a href="#">Help</a></h2>
    <div id="help">
      <button id="show_help">Show Help</button>
    </div>
    <h2><a href="#">Change Theme</a></h2>
    <div id="change_theme">
      <div id="theme_roller"></div>
    </div>
  </div>
  <div id="title">
    <h1>YQB FIC RCO MAP</h1>
    <h3>All information approximate</h3>
  </div>
  <div id="modal_sigmet">
    <h3>Autoload SIGMET</h3>
  </div>
  <div id="modal_help">
    <ul>
      <li><a href="#about">About</a></li>
      <li><a href="#map_help">Map</a></li>
      <li><a href="#mission_help">RCO and Mission Selection</a></li>
      <li><a href="#sigmet_help">SIGMETs</a></li>
      <li><a href="#pirep_help">PIREPs</a></li>
      <li><a href="#notam_help">NOTAMs</a></li>
      <li><a href="#help_help">Help</a></li>
      <li><a href="#theme_help">Change Theme</a></li>
    </ul>
    <div id="about">
      <p>Written by Darren Johnston [johdarr@navcanada.ca]</p>
      <p>This application uses Google Maps, arcGIS and various external libraries to display various peices of information relevant to aviation safety. While specific forms exist for SIGMETs, PIREPs and NOTAMs, numerous other peices of data can be displayed as well. For example, entering a departure and destination point as a SIGMET will show the great-circle track between those points which may be useful in locating a geographic areas or establishing search areas. Any suggestions for specific forms should be relayed to the author.</p>
      <p>Google Maps uses a variation of a spherical mercator projection whereas most aviation maps use a strict ellipsoidal mercator projection. As such, the location of geographic reference marks may differ between the display and a navigational chart published for aviation use. However, the positioning of all elements within this application is done in reference to lattitudes and logitudes. In this case, both aviation and Google Maps use the WGS84 map datum and therefore all distances between plotted points and areas will be uniform and comply with aviation standards. arcGIS services can be configured for various datums and projections. This application configures arcGIS to use the Google Maps spherical mercator and the WGS84 map datum as well, so there should be no deviation in cases where the two services are integrated. Another limitation of the Google Maps system is that only lattitudes from 85N to 85S are displayed, but as no RCO's exist outside this range it remains acceptable for the scope of this application.</p>
      <p>Despite the common datum, the information presented here should be analyzed with common sense and caution should be observed in any case where things appear even remotely close. There are some cases where the Google Maps database appears out of date. For example, as of this writting, CYUL does hot have its ICAO code geocoded properly. While Google Maps is able to locate CYUL by code, the backend services do not, and instead return Castille and Leon in Spain. In such cases, the user will be required to look up and utilize the lattitude and longitude. These errors may be reported to the author and they will be forwarded to Google for correction, but users should be advised that this process is often slow and constantly in flux. Database entries which were correct previously or which are correct when using http://maps.google.com may not be correct within the scope of thise application and there is no way to automatically verify this. Furthermore, the author is not a professional programmer and errors may exist with no fault of Google Maps or arcGIS. For these reasons, the information presented should be scrutinized and considered as approximations only.</p>
      <p>Lastly, none of the external libraries used herein contain any warranty or implied fitness for use. They may be removed or modified at any time and may cease to function properly. In such cases, the author may attempt to reallign this application or further development may cease entirely. As per the Nav Canada code of conduct, Nav Canada retains all rights to the original work included herein, and all referenced works remain the sole intellectual property of their respective authors or rights holders. Any modifications or redistribution may only be done in accordance with their policies or permission. Any referenced works, including the use of Google Maps and arcGIS services, is in accordance with this author's understanding of their respective terms of use. Any violation of them was entirely accidental. Please report infringements directly to the author as soon as practicable or, failing a response, directly to Nav Canada.</p>
    </div>
    <div id="map_help">
      <p>RCO markers and rings have no effect when clicked on, but they will display the frequency if the mouse pointer is hovered over them.</p>
      <p>Plotted data will be stacked with the most recently viewed items at the top. If you are unable to select a data plot on the map because it is located beneath another, switch to desired data entry form in the right side menu to bring the corresponding data plot to the top of the map display.</p>
      <p>Data entered in a SIGMET form is displayed in red. If an area is displayed, that area will be filled in red. Clicking on a SIGMET line or area will hide it but will not remove the entry form from the right side menu. To show it again, simply locate the SIGMET form in question and click on "Show".</p>
      <p>Data entered in a PIREP form is displayed as either yellow UA or orange UUA icons. If a 150NM ring around them was selected to be displayed, they will be in the corresponding colour. Clicking on a PIREP marker or ring will hide it but will not remove the entry from the right side menu. To show it again, simply locate the PIREP form in question and click on "Show".</p>
      <p>Data entered in a NOTAM form is displayed with a red line. If an area is displayed, that area will be filled in black. Clicking on a NOTAM line or area will hide it but will not remove the entry form from the right side menu. To show it again, simply locate the NOTAM form in question and click on "Show".</p>
      <p>Note that all mapping data is assumed approximate as noted in the top right hand corner. Always use common sense and err on the side of caution when analyzing plotted data.</p>
    </div>
    <div id="mission_help">
      <p>The mission selection is located at the top. Only 1 mission may be selected at a time. This selection will group the RCO's into sectors for ease of toggling.</p>
      <p>The entry for rings is use configurable. By default, this is set at 150NM, suitable for determining when SIGMETs and Urgent PIREPs are within broadcast range of an RCO. Any integer value, including 0, may be entered here.</p>
      <p>RCO checkboxes may be toggled individually or on a per-sector basis. Note that the user may switch missions and previous selections will be remembered. By default, toggling a checkbox will only hide the rings. To hide the markers as well, select the "Hide Markers" button at the bottom of the list. "Hide Markers" will only hide RCO markers that are unchecked while it is active, so previously unchecked RCOs will need to be checked and re-unchecked if the marker is to be hidden as well. To deselect "Hide Markers" simply click it again. Note that dark blue does not mean active, only that it was recently clicked.</p>
    </div>
    <div id="sigmet_help">
      <p>To create a new SIGMET form, click on the "New SIGMET" button. At present, there is no limit on how many SIGMETs may be entered, but the application may become sluggish if too much data is being kept; this includes empty SIGMET forms.</p>
      <p>Each SIGMET will have its own tab, these tabs are sortable by clicking and dragging them into the desired position, closable by clicking the X icon on the right side of each individual tab and can be renamed by entering the desired tab name in the "SIGMET Number" box. It is suggested that the most useful naming method may be the SIGMET number provided by MSC (K1 or M6 for example), but there is no requirement to do so.</p>
      <p>SIGMET entry fields are as follows:</p>
      <ul>
        <li>SIGMET Number - The SIGMET identifier provided by MSC or any other value as desired. This will be displayed as the tab title. This is optional. If left blank, the title will remain as "New x" and all data will still plot as normal.</li>
        <li>Closed Area   - Checking this box will close the SIGMET shape instead of drawing a line. If the first and last points entered are the same, this box will be checked for you automatically upon processing.</li>
        <li>Area Radius   - This defines an area around the provided data. If a SIGMET is within 30NM around a line, entering 30 here will draw that buffer automatically and calculate the broadcast area from there.</li>
        <li>Show 150NM    - If this box is checked, an area 150NM around the defined line or area will be drawn as well. Some users find this a more convenient method of visualizing the braodcast area than RCO rings. In that case, RCO ring radius in RCO and Mission Selection can be set to 0 and Show 150NM checked to reduce map clutter.</li>
        <li>Coordinates   - Coordinates can be entered as N lattitude and W longitude or as a bearing and range from an ICAO location.</li>
        <li>Lat/Long      - To enter a S lattitude, negate the value (eg 85S would be -85). To enter an E longitude, negate the value (eg 82E would be -82). The N and W are already take into account. Entering them manually will generate an error. Note that a bearing and range can not be referenced to a Latitude and Longitude. To locate a point a given distance from a Lat/Long, enter the Lat/Long as a single point with an "Area Radius" of the desired distance and then estimate the bearing.</li>
        <li>Brng/Rng      - Bearing and range are taken from the accompanied ICAO location. These values are optional and will be assumed 0 if left blank. Various formats are accepted. For example, 20NM on the 320 degree bearing from a point can be entered as "32020", "320/20", "320020" or "320/020". Note that the bearing will always be assumed to be 3 digits, so "1850" will result in a point 0NM S of the ICAO location, not 50NM S.</li>
        <li>ICAO          - This field will assume ICAO codes have been entered and query Google's database for Lattitude and Longitude. If incorrect data is entered, a value may still be returned but it will likely be incorrect. If map plots appear out of place, verify the information was entered correctly but be advised that the Google Maps database does not always contain exact information and may region bias elsewhere. On rare occasions, correct ICAO codes may return addresses in Europe, Asia or elsewhere. In those cases, use the lattitude and longitude of the points instead.</li>
        <li>Switch method - To switch between Lat/Long and ICAO entry, click on the button that looks like two arrows crossing each other. Data entered will not be deleted, but only the active set of information will be used for processing.</li>
        <li>Remove Coord  - To remove a set of coordinate entry boxes, click the minus button. This will subtract the entire line of coordinate entries from the display. This action cannot be undone.</li>
        <li>Add Coord     - To add a set of coordinate entry boxes, click the plus icon. This will add an empty set on the next line and therefore allows for insertion of a coordinate into the middle of a list if desired. To add a set of entry boxes to the end, click the plus icon on the final entry. Coordinates can not be inserted at the beginning of the list. In that case, create a new set after the first and copy the contents.</li>
        <li>Plot SIGMET   - This button will submit your form for processing. In the case of unparseable data, an error message should be displayed. During processing, you will notice a loading spinner on the bottom right of the tab. You may continue to use the application while the spinner is active and multiple tabs may be loading at once. Processing time should not be more than 1 or 2 seconds unless a large number of coordinates was entered. </li>
        <li>Update        - After a SIGMET is plotted, the "Plot SIGMET" button will be replaced by an "Update" button. This will submit the data and therefore cannot be undone. All data will be replotted, even if no changes were made. As with "Plot Data", there will be a loading spinner during processing but the application may be used during this update process.</li>
        <li>Reset         - The reset button will either remove all entered data from the form if it has not been processed yet, or will restore all data to the state it was in the last time it was processed. This function cannot be undone.</li>
        <li>Hide          - To hide the data plots from the map display, click on "Hide".</li>
        <li>Show          - To show data plots on the map that were previously hidden, click on "Show".</li>
      </ul>
    </div>
    <div id="pirep_help">
      <p>To create a new PIREP form, click on the "New PIREP" button. At present, there is no limit on how many PIREPs may be entered, but the application may become sluggish if too much data is being kept; this includes empty PIREP forms.</p>
      <p>Each PIREP will have its own tab, these tabs are sortable by clicking and dragging them into the desired position, closable by clicking the X icon on the right side of each individual tab and can be renamed by entering the desired tab name in the "Title" box.</p>
      <p>PIREP entry fields are as follows:</p>
      <ul>
        <li>Title         - This will be displayed as the tab title and as the tooltip on a PIREP map marker. This box may be left empty if desired.</li>
        <li>Show 150NM    - If this box is checked, a 150NM ring will be drawn around the PIREP marker.</li>
        <li>UUA           - If the PIREP is urgent, this box should be checked. If it is checked, the map marker will display "UUA", the map plots will be orange instead of yellow, and RCOs within broadcast range will be highlighted.</li>
        <li>Time/Type/Alt - These boxes are all optional for those who wish to track the data in one location.</li>
        <li>Coordinates   - Coordinates can be entered as N lattitude and W longitude or as a bearing and range from an ICAO location.</li>
        <li>Lat/Long      - To enter a S lattitude, negate the value (eg 85S would be -85). To enter an E longitude, negate the value (eg 82E would be -82). The N and W are already take into account. Entering them manually will generate an error. Note that a bearing and range can not be referenced to a Latitude and Longitude.</li>
        <li>Brng/Rng      - Bearing and range are taken from the accompanied ICAO location. These values are optional and will be assumed 0 if left blank. Various formats are accepted. For example, 20NM on the 320 degree bearing from a point can be entered as "32020", "320/20", "320020" or "320/020". Note that the bearing will always be assumed to be 3 digits, so "1855" will result in a point 5NM S of the ICAO location, not 55NM S.</li>
        <li>ICAO          - This field will assume ICAO codes have been entered and query Google's database for Lattitude and Longitude. If incorrect data is entered, a value may still be returned but it will likely be incorrect. If map plots appear out of place, verify the information was entered correctly but be advised that the Google Maps database does not always contain exact information and may region bias elsewhere. On rare occasions, correct ICAO codes may return addresses in Europe, Asia or elsewhere. In those cases, use the lattitude and longitude of the points instead.</li>
        <li>Text box      - The big, empty text box is where PIREP details may be stored. This field may be left blank.</li>
        <li>Switch method - To switch between Lat/Long and ICAO entry, click on the button that looks like two arrows crossing each other. Data entered will not be deleted, but only the active set of information will be used for processing.</li>
        <li>Plot PIREP    - This button will submit your form for processing. In the case of unparseable data, an error message should be displayed. During processing, you will notice a loading spinner on the bottom right of the tab. You may continue to use the application while the spinner is active and multiple tabs may be loading at once. Processing time should not be more than 1 or 2 seconds.</li>
        <li>Update         - After a PIREP is plotted, the "Plot PIREP" button will be replaced by an "Update" button. This will submit the data and therefore cannot be undone. All data will be replotted, even if no changes were made. As with "Plot Data", there will be a loading spinner during processing but the application may be used during this update process.</li>
        <li>Reset           - The reset button will either remove all entered data from the form if it has not been processed yet, or will restore all data to the state it was in the last time it was processed. This function cannot be undone.</li>
        <li>Hide            - To hide the data plots from the map display, click on "Hide".</li>
        <li>Show            - To show data plots on the map that were previously hidden, click on "Show".</li>
      </ul>
    </div>
    <div id="notam_help">
      <p>To create a new NOTAM form, click on the "New NOTAM" button. At present, there is no limit on how many NOTAMs may be entered, but the application may become sluggish if too much data is being kept; this includes empty NOTAM forms.</p>
      <p>Each NOTAM will have its own tab, these tabs are sortable by clicking and dragging them into the desired position, closable by clicking the X icon on the right side of each individual tab and can be renamed by entering the desired tab name in the "Title" box.</p>
      <p>NOTAM entry fields are as follows:</p>
      <ul>
        <li>Title         - This will be displayed as the tab title. It has not other uses and may be left empty if desired.</li>
        <li>Text box      - he big, empty text box is where PIREP details may be stored. This field may be left blank.</li>
        <li>Area Radius   - This defines an area around the provided data.</li>
        <li>Closed Area   - Checking this box will close the NOTAM shape instead of drawing a line. If the first and last points entered are the same, this box will be checked for you automatically upon processing.</li>
        <li>Coordinates   - Coordinates can be entered as N lattitude and W longitude or as a bearing and range from an ICAO location.
        <li>Lat/Long      - To enter a S lattitude, negate the value (eg 85S would be -85). To enter an E longitude, negate the value (eg 82E would be -82). The N and W are already take into account. Entering them manually will generate an error. Note that a bearing and range can not be referenced to a Latitude and Longitude. To locate a point a given distance from a Lat/Long, enter the Lat/Long as a single point with an "Area Radius" of the desired distance and then estimate the bearing.</li>
        <li>Brng/Rng      - Bearing and range are taken from the accompanied ICAO location. These values are optional and will be assumed 0 if left blank. Various formats are accepted. For example, 20NM on the 320 degree bearing from a point can be entered as "32020", "320/20", "320020" or "320/020". Note that the bearing will always be assumed to be 3 digits, so "1850" will result in a point 0NM S of the ICAO location, not 50NM S.</li>
        <li>ICAO          - This field will assume ICAO codes have been entered and query Google's database for Lattitude and Longitude. If incorrect data is entered, a value may still be returned but it will likely be incorrect. If map plots appear out of place, verify the information was entered correctly but be advised that the Google Maps database does not always contain exact information and may region bias elsewhere. On rare occasions, correct ICAO codes may return addresses in Europe, Asia or elsewhere. In those cases, use the lattitude and longitude of the points instead.</li>
        <li>Switch method - To switch between Lat/Long and ICAO entry, click on the button that looks like two arrows crossing each other. Data entered will not be deleted, but only the active set of information will be used for processing.</li>
        <li>Remove Coord  - To remove a set of coordinate entry boxes, click the minus button. This will subtract the entire line of coordinate entries from the display. This action cannot be undone.</li>
        <li>Add Coord     - To add a set of coordinate entry boxes, click the plus icon. This will add an empty set on the next line and therefore allows for insertion of a coordinate into the middle of a list if desired. To add a set of entry boxes to the end, click the plus icon on the final entry. Coordinates can not be inserted at the beginning of the list. In that case, create a new set after the first and copy the contents.</li>
        <li>Plot NOTAM    - This button will submit your form for processing. In the case of unparseable data, an error message should be displayed. During processing, you will notice a loading spinner on the bottom right of the tab. You may continue to use the application while the spinner is active and multiple tabs may be loading at once. Processing time should not be more than 1 or 2 seconds unless a large number of coordinates was entered.</li>
        <li>Update        - After a NOTAM is plotted, the "Plot NOTAM" button will be replaced by an "Update" button. This will submit the data and therefore cannot be undone. All data will be replotted, even if no changes were made. As with "Plot Data", there will be a loading spinner during processing but the application may be used during this update process.</li>
        <li>Reset         - The reset button will either remove all entered data from the form if it has not been processed yet, or will restore all data to the state it was in the last time it was processed. This function cannot be undone.</li>
        <li>Hide          - To hide the data plots from the map display, click on "Hide".</li>
        <li>Show          - To show data plots on the map that were previously hidden, click on "Show".</li>
      </ul>
    </div>
    <div id="help_help">
      <p>Displays this help page.</p>
    </div>
    <div id="theme_help">
      <p>The external libraries used for this application provide a theme framework. The list of available of themes along with a preview is contained in a drop down menu. Simply select the theme you want to use and it will be applied universally to all applicable portions.</p>
    </div>
  </div>
  <div id="templates" class="hidden">
    <div id="coord_template">
        <div class="coordinate clear">
          <div class="icao_entry top_margin hidden">
            <label class="left_floated">Brng/Rng:&nbsp;
              <input type="text" name="brng_rng" onfocus="this.select()" size="7" />
            </label>
            <label class="left_floated">ICAO:&nbsp;
              <input type="text" name="icao_ident" onfocus="this.select()" size="7" />
            </label>
          </div>
          <div class="coord_entry top_margin">
            <label class="left_floated">Lat:&nbsp;
              <input type="text" name="lat" onfocus="this.select()" size="7" />&nbsp;N
            </label>
            <label class="left_floated">Long:&nbsp;
              <input type="text" name="lng" onfocus="this.select()" size="7" />&nbsp;W
            </label>
          </div>
          <span class="right_floated ui-icon ui-icon-plus"></span>
          <span class="right_floated ui-icon ui-icon-minus"></span>
          <span class="right_floated ui-icon ui-icon-shuffle bottom_margin"></span>
        </div>
    </div>
    <div id="sigmet_template">
      <form autocomplete="off"><fieldset class="ui-helper-reset">
        <label class="left_floated">SIGMET number:&nbsp;
          <input type="text" name="sigmet_id" onfocus="this.select()" size="4" />
        </label>
        <label class="right_floated">
          <input type="checkbox" name="closed_area" />Closed Area
        </label><br />
        <label class="left_floated clear_both">Area Radius:&nbsp;
          <input type="text" name="sigmet_radius" class="top_margin bottom_margin" onfocus="this.select()" value=0 size="3" />&nbsp;NM
        </label>
        <label class="right_floated top_margin">
          <input type="checkbox" name="plot_150"/>Show 150NM
        </label><br />
      </fieldset></form>
      <textarea class="top_margin clear" name="text"></textarea>
      <button name="plot_data" class="top_margin">Plot SIGMET</button>
      <button name="update" class="top_margin hidden">Update</button>
      <button name="reset" class="top_margin">Reset</button>
      <button name="hide" class="top_margin hidden right_floated">Hide</button>
      <button name="show" class="top_margin hidden right_floated">Show</button>
      <div class="center data_load right_floated hidden">
        <img src="https://public.bay.livefilestore.com/y1pNqPs3eTmM9YeY6N3OL7uIgaLoYnGPjFu4BVsFl1eJOjuHuR8TJUDTAdlPEY6gfkB5YajKspZRLZMwOFS_nunYw/ajax-loader.gif?psid=1"
          alt="Loading" />
      </div>
    </div>
    <div id="pirep_template">
      <form autocomplete="off"><fieldset class="ui-helper-reset">
        <label class="left_floated">Title:&nbsp;
          <input type="text" name="pirep_id" onfocus="this.select()" size="5" />
        </label>
        <label class="right_floated">
          <input type="checkbox" name="urgent" />UUA
        </label>
        <label class="right_floated right_margin">
          <input type="checkbox" name="plot_150" />Show 150NM
        </label>
        <div class="clear">
          <label>Time:&nbsp;
            <input type="text" class="top_margin right_margin" onfocus="this.select()" size="5" />
          </label>
          <label>Type:&nbsp;
            <input type="text" class="top_margin right_margin" onfocus="this.select()" size="5" />
          </label>
          <label>Alt:&nbsp;
            <input type="text" class="top_margin" onfocus="this.select()" size="4" />
          </label><br />
        </div>
      </fieldset></form>
      <textarea class="top_margin clear"></textarea>
      <button name="plot_data" class="top_margin">Plot PIREP</button>
      <button name="update" class="top_margin hidden">Update</button>
      <button name="reset" class="top_margin">Reset</button>
      <button name="hide" class="top_margin hidden right_floated">Hide</button>
      <button name="show" class="top_margin hidden right_floated">Show</button>
      <div class="center data_load right_floated hidden">
        <img src="https://public.bay.livefilestore.com/y1pNqPs3eTmM9YeY6N3OL7uIgaLoYnGPjFu4BVsFl1eJOjuHuR8TJUDTAdlPEY6gfkB5YajKspZRLZMwOFS_nunYw/ajax-loader.gif?psid=1"
          alt="Loading" />
      </div>
    </div>
    <div id="notam_template">
      <form autocomplete="off"><fieldset class="ui-helper-reset">
        <label>Title:&nbsp;
          <input type="text" name="notam_id" onfocus="this.select()" size="5" />
        </label>
        <textarea class="top_margin clear"></textarea>
        <label class="left_floated">Area Radius:&nbsp;
          <input type="text" name="notam_radius" class="top_margin bottom_margin" onfocus="this.select()" value=0 size="3" />&nbsp;NM
        </label>
        <label class="right_floated top_margin">
          <input type="checkbox" name="closed_area" />Closed Area
        </label>
      </fieldset></form>
      <button name="plot_data" class="bottom_margin clear">Plot NOTAM</button>
      <button name="update" class="top_margin hidden">Update</button>
      <button name="reset" class="bottom_margin">Reset</button>
      <button name="hide" class="top_margin hidden right_floated">Hide</button>
      <button name="show" class="top_margin hidden right_floated">Show</button>
      <div class="center data_load right_floated hidden">
        <img src="https://public.bay.livefilestore.com/y1pNqPs3eTmM9YeY6N3OL7uIgaLoYnGPjFu4BVsFl1eJOjuHuR8TJUDTAdlPEY6gfkB5YajKspZRLZMwOFS_nunYw/ajax-loader.gif?psid=1"
          alt="Loading" />
      </div>
    </div>
  </div>
  
  <div id="backups" class="hidden">
    <div id="sigmet_backups"></div>
    <div id="pirep_backups"></div>
    <div id="notam_backups"></div>
  </div>
</body>
</html>